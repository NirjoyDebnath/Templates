const int sz = 1e6+9;
lli modInverse(lli a, lli m)
{
	lli m0 = m;
	lli y = 0, x = 1;

	if (m == 1)
	return 0;

	while (a > 1)
	{
		lli q = a / m;
		lli t = m;

		m = a % m, a = t;
		t = y;

		y = x - q * y;
		x = t;
	}

	if (x < 0)
	x += m0;

	return x;
}
lli p_pow[sz],modIn[sz];
lli hash_val[sz];
lli p = 31;
lli m = 1e9 + 7;
void compute_hash(string const& s)
{
    hash_val[0] = s[0] - 'a' + 1;
    for (lli i =1;i<s.size();i++)
    {
        hash_val[i] = (hash_val[i-1] + (s[i] - 'a' + 1) * p_pow[i]) % m;

    }
}
lli get_hash(string const& s)
{
    lli x = s[0] - 'a' + 1;
    for (lli i =1;i<s.size();i++)
    {
        x = (x + (s[i] - 'a' + 1) * p_pow[i]) % m;

    }
    return x;
}
void powCalc(lli n)
{
    p_pow[0] = 1;
    for(lli i=1;i<=n;i++)
    {
        p_pow[i] = (p*p_pow[i-1])%m;
        modIn[i]  =  modInverse(p_pow[i],m);
    }
}
lli query_hash(lli l,lli r)
{
    if(r<l)
        return 0;
    if(l==0)
        return hash_val[r];
    else return ((((hash_val[r] - hash_val[l-1])+m)%m)*modIn[l])%m;
}
lli mergeHash(lli l1,lli r1,lli l2,lli r2)
{
    return (query_hash(l1,r1)   + query_hash(l2,r2)*p_pow[r1-l1+1])%m;
}


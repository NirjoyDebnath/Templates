lli I=1;
vector<lli>adjAC[500005],ans(500005);
struct AC
{
    lli node[26],cnt,failindex;
    vector<lli>wordindex;
    /*AC()
    {
        cnt=0;
        for(lli i=0;i<26;i++)node[i]=0;
    }*/
}root[500005];
void ins(string& a,lli x)
{
    lli temp=1;
    for(lli i=0;i<a.size();i++)
    {
        if(!root[temp].node[a[i]-'a'])root[temp].node[a[i]-'a']=++I;
        temp=root[temp].node[a[i]-'a'];
    }
    root[temp].wordindex.pb(x);
}
void buildfailure()
{
    lli temp=1;
    queue<lli>q;
    root[1].failindex=1;
    for(lli i=0;i<26;i++)
    {
        if(root[1].node[i])
        {
            q.push(root[1].node[i]);
            root[root[1].node[i]].failindex=1;
        }
        else root[1].node[i]=1;
    }
    while(!q.empty())
    {
        lli x=q.front();
        q.pop();
        for(lli i=0;i<26;i++)
        {
            if(root[x].node[i])
            {
                q.push(root[x].node[i]);
                root[root[x].node[i]].failindex=root[root[x].failindex].node[i];
            }
            else root[x].node[i]=root[root[x].failindex].node[i];
        }
    }
    for(lli i=2;i<=I;i++)adjAC[root[i].failindex].pb(i);
}
void traverse(string& a)
{
    lli temp=1;
    for(lli i=0;i<a.size();i++)
    {
        temp=root[temp].node[a[i]-'a'];
        root[temp].cnt++;
    }
}
lli calculate(lli x)
{
    lli X=root[x].cnt;
    for(lli i=0;i<adjAC[x].size();i++)
    {
        //cout<<x<<" "<<adjAC[x][i]<<endl;
        X+=calculate(adjAC[x][i]);
    }
    for(lli i=0;i<root[x].wordindex.size();i++)ans[root[x].wordindex[i]]=X;
    return X;
}
